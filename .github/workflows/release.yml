name: Auto Bump Patch + Release Model Service

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump-build-release:
    # Skip bump-build-release if this was an automatic pre-release version bump
    if: ${{ !contains(github.event.head_commit.message, 'Bump version to') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch latest tags and bump patch
        id: bump-version
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Latest semantic version tag is: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            echo "No existing semantic version tag found, starting from v0.0.1"
            NEW_TAG="v0.0.1"
          else
            VERSION=${LATEST_TAG#v}
            MAJOR=$(echo "$VERSION" | cut -d . -f 1)
            MINOR=$(echo "$VERSION" | cut -d . -f 2)
            PATCH=$(echo "$VERSION" | cut -d . -f 3)

            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          fi

          echo "Creating new tag: $NEW_TAG"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

          echo "version=${NEW_TAG#v}" >> $GITHUB_ENV
          echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT

      - name: Parse version info from tag
        id: parse-version
        run: |
          VERSION=${{ steps.bump-version.outputs.version }}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)

          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --maxfail=5 --disable-warnings

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push multi-arch Docker image
        run: |
          docker buildx build --platform linux/arm64/v8,linux/amd64 \
            --tag ghcr.io/remla25-team12/model-service:${{ env.version }} \
            --tag ghcr.io/remla25-team12/model-service:latest \
            --push .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  bump-pre-release-version:
    needs: bump-build-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Verify latest release tag
        id: latest-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Compute next timestamped pre-release version
        run: |
          LATEST_TAG=${{ steps.latest-tag.outputs.LATEST_TAG }}
          echo "Latest release tag is $LATEST_TAG"

          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)

          NEXT_PATCH=$((PATCH + 1))

          TIMESTAMP=$(date -u +"%Y%m%d.%H%M")
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-pre.${TIMESTAMP}"
          echo "Computed next pre-release version: $NEXT_VERSION"

          if [ -f version.txt ]; then
            CURRENT_VERSION=$(cat version.txt)
            echo "Current version.txt: $CURRENT_VERSION"
          fi

          echo "${NEXT_VERSION}" > version.txt
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit and push new pre-release version
        run: |
          git add version.txt
          git commit -m "Bump version to ${{ env.next_version }} after release ${{ needs.bump-build-release.outputs.version }}"
          git push origin main
