name: Release model-service

# on:
#   push:
#     branches:
#       - pre-release

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --maxfail=5 --disable-warnings

      - name: Parse version info from tag
        id: parse-version
        run: |
          VERSION=${GITHUB_REF:11}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push multi-arch Docker image
        run: |
          docker buildx build --platform linux/arm64/v8,linux/amd64 \
            --tag ghcr.io/remla25-team12/model-service:${{ env.version }} \
            --tag ghcr.io/remla25-team12/model-service:latest \
            --push .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  bump-version-on-main:
    #needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Skip if commit by GitHub Actions
        run: |
          echo "Triggered by: ${{ github.actor }}"
          if [ "${{ github.actor }}" = "github-actions" ]; then
            echo "Exiting to prevent loop."
            exit 0
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: pre-release
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Compute next timestamped pre-release version
        run: |
          VERSION=$(grep -oP '(?<=__version__ = ")[^"]+' version.py)
          echo "Current released version: $VERSION"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          
          # Generate timestamp suffix to support multiple versions of the same pre-release
          TIMESTAMP=$(date -u +"%Y%m%d.%H%M")
          
          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}-pre.${TIMESTAMP}"
          echo "__version__ = \"${NEXT_VERSION}\"" > version.py
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit and push new pre-release version
        run: |
          git add version.py
          git commit -m "Bump version to ${{ env.next_version }} after release ${{ needs.build-and-publish.outputs.version }}"
          git push origin refs/heads/pre-release
